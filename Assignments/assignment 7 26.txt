'''
I decided to place the print command inside of the definition and performed a function call to assign the list of numbers to the parameter "numbers" '''

list_of_nums = [2, 4, 6, 8, 10, 20, 30] # list of numbers for the function


def avg_of_list(numbers): # set definition title and parameter

    # below I perform the calculation within the print command and returned the result 
    return print(f"The average of the {len(numbers)} numbers in the list is {sum(numbers) / len(numbers)}") 

avg_of_list(list_of_nums) # function call



''' Below was my first run at the problem, but I felt the code above was cleaner. Both versions had the same results upon testing.  I apologize if I have unnecessarily complicated the problem.   

def avg_of_list(numbers): # set definition title and parameter
    return sum(numbers) / len(numbers) # return the calculation for the avg of the list of numbers
    
print(avg_of_list(list_of_nums)) # print the result of the function call

'''

def average_grades(student_list):
  averages = {} # Initialize output dictionary
  for student in student_list: # For every student in the given dictionary
    # Lets calculate the sum of all the grades
    sum = student['science'] + student['math'] + student['world history']
    # Then we create a key value pair for our output dictionary
    # The students name is the key
    # The value is going to be the average of the students grades (sum/3)
    averages[student["name"]] = sum / 3
  # Once the for loop is complete, return the output dictionary
  return averages

# Lets print the result using the students dictionary above
print(average_grades(students))



*********jeans code ***********


even_nums = lambda n : n % 2 == 0
 
print(even_nums(5))
 
 
my_list = [0,1,2,3,4,5,6,7,8,9,10]
 
even_num_filter = list(filter(lambda n : n % 2 == 0, my_list))
 
print(list(even_num_filter))